openapi: 3.1.0

info:
  title: "しずかなインターネット API"
  version: 1.0.0
  description: |-
    - このAPIは自分の記事データを取得するために利用します。他のユーザーのデータを取得することはできません。
    - APIは[プロジェクトのスポンサー](https://sizu.me/sponsors/purchase)のみが利用できます。
    - 認証やレート制限などについては[GitHubリポジトリ](https://github.com/catnose99/quiet-internet-api-docs)を参照してください。

externalDocs:
  description: quiet-internet-api-docs (GitHub)
  url: https://github.com/catnose99/quiet-internet-api-docs

security:
  - bearerAuth: []

servers:
  - url: https://sizu.me

paths:
  "/api/v1/posts":
    get:
      summary: "記事の一覧を取得する"
      description: |-
        - 自分の記事一覧を取得するためのエンドポイントです。
      tags: ["posts"]
      parameters:
        - in: query
          name: page
          description: ページ番号
          schema:
            type: integer
            minimum: 1
            maximum: 999
            default: 1
        - in: query
          name: perPage
          description: 1ページあたりの記事数
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: sort
          description: ソートの基準（作成日または更新日）
          schema:
            type: string
            enum: ["created", "updated"]
        - in: query
          name: direction
          description: ソートの方向（昇順または降順）
          schema:
            type: string
            enum: ["asc", "desc"]
        - in: query
          name: visibility
          description: 記事の公開範囲
          schema:
            type: string
            enum: ["MYSELF", "ANYONE"]
        - in: query
          name: createdAfter
          description: 指定日時以降に作成された記事を取得。ISO 8601形式で指定する。
          schema:
            type: string
            format: date-time
        - in: query
          name: createdBefore
          description: 指定日時以前に作成された記事を取得。ISO 8601形式で指定する。
          schema:
            type: string
            format: date-time
        - in: query
          name: updatedAfter
          description: 指定日時以降に更新された記事を取得。ISO 8601形式で指定する。
          schema:
            type: string
            format: date-time
        - in: query
          name: updatedBefore
          description: 指定日時以前に更新された記事を取得。ISO 8601形式で指定する。
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: 記事一覧の取得に成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/PostMeta"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
              example:
                value:
                  {
                    "posts":
                      [
                        {
                          "slug": "2n0ag76",
                          "title": "Hello, world!",
                          "bodyCharacterCount": 123,
                          "visibility": "ANYONE",
                          "tags": ["blog", "travel"],
                          "createdAt": "2023-08-08T12:34:56.789Z",
                          "updatedAt": "2023-08-08T14:34:56.789Z",
                        },
                        {
                          "slug": "p11dguw",
                          "title": "Hello, world! 2",
                          "bodyCharacterCount": 456,
                          "visibility": "MYSELF",
                          "tags": [],
                          "createdAt": "2023-08-08T11:32:56.789Z",
                          "updatedAt": "2023-08-08T15:38:56.789Z",
                        },
                      ],
                    "pagination":
                      {
                        "currentPage": 1,
                        "nextPage": 2,
                        "prevPage": null,
                        "perPage": 20,
                        "sort": "createdAt",
                        "direction": "desc",
                      },
                  }
        "400":
          description: "Invalid query parameter"
        "401":
          description: "Authentication failed"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"

  "/api/v1/posts/{slug}":
    get:
      summary: "記事の詳細情報を取得する"
      description: "指定されたslugの記事の詳細情報を取得するためのエンドポイントです。"
      tags: ["posts"]
      parameters:
        - in: path
          name: slug
          description: 記事のslug
          required: true
          schema:
            type: string
            maxLength: 100
            minLength: 1
      responses:
        "200":
          description: 記事の詳細
          content:
            application/json:
              schema:
                type: object
                properties:
                  post:
                    $ref: "#/components/schemas/PostDetail"
        "400":
          description: "Invalid slug"
        "401":
          description: "Authentication failed"
        "404":
          description: "Article not found"
        "429":
          description: "Rate limit exceeded"
        "500":
          description: "Internal server error"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: |-
        [ダッシュボード](https://sizu.me/dashboard/settings?tab=sponsor)から取得したAPIキーを指定します。
  schemas:
    PostMeta:
      type: object
      properties:
        slug:
          type: string
        title:
          type: string
        bodyCharacterCount:
          type: integer
        visibility:
          type: string
          enum: ["MYSELF", "ANYONE"]
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PostDetail:
      allOf:
        - $ref: "#/components/schemas/PostMeta"
        - type: object
          properties:
            bodyMarkdown:
              type: string
              nullable: true
            bodyHtml:
              type: string
              nullable: true
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
        nextPage:
          type: integer
          nullable: true
        prevPage:
          type: integer
          nullable: true
        perPage:
          type: integer
        sort:
          type: string
          enum: ["created", "updated"]
        direction:
          type: string
          enum: ["asc", "desc"]
